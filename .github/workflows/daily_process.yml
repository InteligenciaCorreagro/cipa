name: Proceso Completo Diario - Facturas y Notas Cr√©dito

on:
  schedule:
    # Ejecutar todos los d√≠as a las 1:00 PM UTC = 8:00 AM hora Bogot√° (UTC-5)
    - cron: '0 13 * * *'
  workflow_dispatch:  # Permite ejecuci√≥n manual desde GitHub

jobs:
  procesar-facturas:
    runs-on: ubuntu-latest
    
    steps:
      # ============================================================
      # 1. PREPARACI√ìN DEL ENTORNO
      # ============================================================
      - name: üì• Descargar c√≥digo del repositorio
        uses: actions/checkout@v4
      
      - name: üêç Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: üì¶ Cache de dependencias pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: üîß Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: üìÅ Crear estructura de directorios
        run: |
          mkdir -p data output templates
          echo "‚úÖ Directorios creados"
      
      # ============================================================
      # 2. RECUPERAR BASE DE DATOS DE EJECUCI√ìN ANTERIOR
      # ============================================================
      - name: üíæ Descargar base de datos de ejecuci√≥n anterior
        uses: actions/download-artifact@v4
        with:
          name: base-datos-notas-credito
          path: data/
        continue-on-error: true
        # continue-on-error permite que falle en la primera ejecuci√≥n
      
      - name: üîç Verificar estado de la base de datos
        run: |
          if [ -f data/notas_credito.db ]; then
            echo "‚úÖ Base de datos encontrada de ejecuci√≥n anterior"
            echo "üìä Informaci√≥n de la BD:"
            ls -lh data/notas_credito.db
            
            # Mostrar estad√≠sticas
            sqlite3 data/notas_credito.db "SELECT 'Notas pendientes: ' || COUNT(*) FROM notas_credito WHERE estado='PENDIENTE';"
            sqlite3 data/notas_credito.db "SELECT 'Notas aplicadas: ' || COUNT(*) FROM notas_credito WHERE estado='APLICADA';"
            sqlite3 data/notas_credito.db "SELECT 'Total aplicaciones: ' || COUNT(*) FROM aplicaciones_notas;"
          else
            echo "‚ö†Ô∏è  Primera ejecuci√≥n: Base de datos se crear√° autom√°ticamente"
            echo "üìù Se inicializar√°n las tablas:"
            echo "   - notas_credito"
            echo "   - aplicaciones_notas"
            echo "   - facturas_rechazadas"
            echo "   - tipos_inventario_detectados"
          fi
      
      # ============================================================
      # 3. EJECUTAR PROCESO PRINCIPAL
      # ============================================================
      - name: üöÄ Ejecutar proceso de facturas y notas cr√©dito
        env:
          # Credenciales API SIESA
          CONNI_KEY: ${{ secrets.CONNI_KEY }}
          CONNI_TOKEN: ${{ secrets.CONNI_TOKEN }}
          
          # Configuraci√≥n Email
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          DESTINATARIOS: ${{ secrets.DESTINATARIOS }}
          
          # Configuraci√≥n Base de Datos
          DB_PATH: ./data/notas_credito.db
        run: |
          echo "=================================================="
          echo "üîÑ INICIANDO PROCESO COMPLETO"
          echo "=================================================="
          echo "üìÖ Fecha: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "üïê Zona horaria: America/Bogota"
          echo ""
          
          # Ejecutar proceso principal
          python main.py
          
          echo ""
          echo "=================================================="
          echo "‚úÖ PROCESO COMPLETADO"
          echo "=================================================="
      
      # ============================================================
      # 4. GUARDAR RESULTADOS
      # ============================================================
      - name: üìä Cargar Excel generado
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reporte-facturas-${{ github.run_number }}
          path: output/*.xlsx
          retention-days: 30
      
      - name: üìù Cargar reportes de texto
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reportes-adicionales-${{ github.run_number }}
          path: output/*.txt
          retention-days: 30
      
      # ============================================================
      # 5. PERSISTIR BASE DE DATOS PARA PR√ìXIMA EJECUCI√ìN
      # ============================================================
      - name: üíæ Guardar base de datos actualizada
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: base-datos-notas-credito
          path: data/*.db
          retention-days: 90
          # La BD se mantiene 90 d√≠as para hist√≥rico
      
      # ============================================================
      # 6. MOSTRAR RESUMEN DE EJECUCI√ìN
      # ============================================================
      - name: üìà Mostrar resumen de ejecuci√≥n
        if: always()
        run: |
          echo ""
          echo "=================================================="
          echo "üìä RESUMEN DE EJECUCI√ìN"
          echo "=================================================="
          
          if [ -f data/notas_credito.db ]; then
            echo "üíæ Estado de Base de Datos:"
            sqlite3 data/notas_credito.db "SELECT '  Notas pendientes: ' || COUNT(*) || ' (Saldo: $' || COALESCE(SUM(saldo_pendiente), 0) || ')' FROM notas_credito WHERE estado='PENDIENTE';"
            sqlite3 data/notas_credito.db "SELECT '  Notas aplicadas: ' || COUNT(*) FROM notas_credito WHERE estado='APLICADA';"
            sqlite3 data/notas_credito.db "SELECT '  Total aplicaciones hist√≥rico: ' || COUNT(*) FROM aplicaciones_notas;"
            sqlite3 data/notas_credito.db "SELECT '  Facturas rechazadas hist√≥rico: ' || COUNT(*) FROM facturas_rechazadas;"
            
            echo ""
            echo "üìã Aplicaciones de HOY:"
            sqlite3 data/notas_credito.db "SELECT '  ' || numero_nota || ' ‚Üí ' || numero_factura || ' ($' || valor_aplicado || ')' FROM aplicaciones_notas WHERE DATE(fecha_aplicacion) = DATE('now') LIMIT 10;"
          fi
          
          echo ""
          echo "üìÅ Archivos generados:"
          if [ -d output ]; then
            ls -lh output/
          fi
          
          echo ""
          echo "=================================================="
          echo "‚úÖ EJECUCI√ìN FINALIZADA"
          echo "=================================================="
      
      # ============================================================
      # 7. NOTIFICACI√ìN EN CASO DE ERROR (OPCIONAL)
      # ============================================================
      - name: üö® Notificar error (si falla)
        if: failure()
        run: |
          echo "‚ùå El proceso fall√≥. Revisar logs arriba."
          echo "üîç Puntos de verificaci√≥n:"
          echo "  1. ¬øLas credenciales est√°n configuradas correctamente?"
          echo "  2. ¬øLa API de SIESA est√° disponible?"
          echo "  3. ¬øEl servidor SMTP est√° accesible?"
          echo ""
          echo "üìß Se recomienda revisar los secrets en:"
          echo "   Settings ‚Üí Secrets and variables ‚Üí Actions"