name: Proceso Completo Diario - Facturas y Notas Cr√©dito

on:
  schedule:
    # Ejecutar todos los d√≠as a las 1:00 PM UTC = 8:00 AM hora Bogot√° (UTC-5)
    - cron: '0 13 * * *'
  workflow_dispatch:  # Permite ejecuci√≥n manual desde GitHub

jobs:
  procesar-facturas:
    runs-on: ubuntu-latest
    
    # CR√çTICO: Dar permisos para hacer commits al repositorio
    permissions:
      contents: write
    
    steps:
      # ============================================================
      # 1. PREPARACI√ìN DEL ENTORNO
      # ============================================================
      - name: üì• Descargar c√≥digo del repositorio
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Obtener todo el historial
      
      - name: üîß Configurar Git para commits autom√°ticos
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: üêç Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: üì¶ Cache de dependencias pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: üîß Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: üìÅ Crear estructura de directorios
        run: |
          mkdir -p data output templates
          echo "‚úÖ Directorios creados"
      
      # ============================================================
      # 2. VERIFICAR BASE DE DATOS EXISTENTE (YA EST√Å EN EL REPO)
      # ============================================================
      - name: üìä Verificar y mostrar estado de la base de datos
        run: |
          # La base de datos ya est√° en el repositorio (si existe)
          if [ -f data/notas_credito.db ]; then
            echo "‚úÖ Base de datos encontrada en el repositorio"
            echo "üìä Informaci√≥n de la BD:"
            ls -lh data/notas_credito.db
            
            # Crear backup antes de procesar
            cp data/notas_credito.db data/notas_credito.db.backup
            echo "‚úÖ Backup creado: data/notas_credito.db.backup"
            
            # Mostrar estad√≠sticas ANTES del proceso
            echo ""
            echo "üìà Estad√≠sticas ANTES del proceso:"
            sqlite3 data/notas_credito.db "SELECT 'Notas pendientes: ' || COUNT(*) || ' (Saldo: $' || COALESCE(SUM(saldo_pendiente), 0) || ')' FROM notas_credito WHERE estado='PENDIENTE';" || echo "Error al consultar"
            sqlite3 data/notas_credito.db "SELECT 'Notas aplicadas: ' || COUNT(*) FROM notas_credito WHERE estado='APLICADA';" || echo "Error al consultar"
            sqlite3 data/notas_credito.db "SELECT 'Total aplicaciones: ' || COUNT(*) FROM aplicaciones_notas;" || echo "Error al consultar"
            sqlite3 data/notas_credito.db "SELECT 'Facturas rechazadas: ' || COUNT(*) FROM facturas_rechazadas;" || echo "Error al consultar"
            
            echo ""
            echo "üìÖ √öltima actualizaci√≥n:"
            sqlite3 data/notas_credito.db "SELECT '√öltima nota registrada: ' || MAX(fecha_registro) FROM notas_credito;" || echo "Sin notas registradas"
          else
            echo "‚ö†Ô∏è  Primera ejecuci√≥n: Base de datos se crear√° autom√°ticamente"
            echo "üìù Se inicializar√°n las tablas:"
            echo "   - notas_credito"
            echo "   - aplicaciones_notas"
            echo "   - facturas_rechazadas"
            echo "   - tipos_inventario_detectados"
          fi
      
      # ============================================================
      # 3. EJECUTAR PROCESO PRINCIPAL
      # ============================================================
      - name: üöÄ Ejecutar proceso de facturas y notas cr√©dito
        env:
          # Credenciales API SIESA
          CONNI_KEY: ${{ secrets.CONNI_KEY }}
          CONNI_TOKEN: ${{ secrets.CONNI_TOKEN }}
          
          # Configuraci√≥n Email
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          DESTINATARIOS: ${{ secrets.DESTINATARIOS }}
          
          # Configuraci√≥n Base de Datos
          DB_PATH: ./data/notas_credito.db
        run: |
          echo "=================================================="
          echo "üîÑ INICIANDO PROCESO COMPLETO"
          echo "=================================================="
          echo "üìÖ Fecha: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "üïê Zona horaria: America/Bogota"
          echo "üóÑÔ∏è  Base de datos: ./data/notas_credito.db"
          echo ""
          
          # Ejecutar proceso principal
          python main.py
          
          echo ""
          echo "=================================================="
          echo "‚úÖ PROCESO COMPLETADO"
          echo "=================================================="
      
      # ============================================================
      # 4. MOSTRAR ESTAD√çSTICAS POST-PROCESO
      # ============================================================
      - name: üìà Mostrar estad√≠sticas DESPU√âS del proceso
        if: always()
        run: |
          echo ""
          echo "=================================================="
          echo "üìä ESTAD√çSTICAS POST-PROCESO"
          echo "=================================================="
          
          if [ -f data/notas_credito.db ]; then
            echo "üíæ Estado de Base de Datos:"
            sqlite3 data/notas_credito.db "SELECT '  Notas pendientes: ' || COUNT(*) || ' (Saldo: $' || COALESCE(SUM(saldo_pendiente), 0) || ')' FROM notas_credito WHERE estado='PENDIENTE';" || echo "Error"
            sqlite3 data/notas_credito.db "SELECT '  Notas aplicadas: ' || COUNT(*) FROM notas_credito WHERE estado='APLICADA';" || echo "Error"
            sqlite3 data/notas_credito.db "SELECT '  Total aplicaciones hist√≥rico: ' || COUNT(*) FROM aplicaciones_notas;" || echo "Error"
            sqlite3 data/notas_credito.db "SELECT '  Facturas rechazadas hist√≥rico: ' || COUNT(*) FROM facturas_rechazadas;" || echo "Error"
            
            echo ""
            echo "üìã Aplicaciones de HOY:"
            sqlite3 data/notas_credito.db "SELECT '  ' || numero_nota || ' ‚Üí ' || numero_factura || ' ($' || valor_aplicado || ')' FROM aplicaciones_notas WHERE DATE(fecha_aplicacion) = DATE('now') LIMIT 10;" || echo "Sin aplicaciones hoy"
            
            echo ""
            echo "üÜï Notas nuevas registradas HOY:"
            sqlite3 data/notas_credito.db "SELECT '  ' || numero_nota || ' - $' || valor_total || ' (' || nombre_cliente || ')' FROM notas_credito WHERE DATE(fecha_registro) = DATE('now') LIMIT 10;" || echo "Sin notas nuevas hoy"
          fi
          
          echo ""
          echo "üìÅ Archivos generados:"
          if [ -d output ]; then
            ls -lh output/ || echo "Sin archivos generados"
          fi
          
          echo ""
          echo "=================================================="
      
      # ============================================================
      # 5. PERSISTIR BASE DE DATOS EN EL REPOSITORIO
      # ============================================================
      - name: üíæ Guardar cambios de la base de datos en el repositorio
        if: always()
        run: |
          echo "=================================================="
          echo "üíæ PERSISTIENDO BASE DE DATOS EN EL REPOSITORIO"
          echo "=================================================="
          
          # Verificar si hay cambios en la BD
          if [ -f data/notas_credito.db ]; then
            # Agregar la BD al staging
            git add data/notas_credito.db
            
            # Verificar si hay cambios
            if git diff --staged --quiet; then
              echo "‚ÑπÔ∏è  No hay cambios en la base de datos"
            else
              # Hacer commit con informaci√≥n detallada
              FECHA=$(date '+%Y-%m-%d %H:%M:%S')
              
              # Obtener estad√≠sticas para el mensaje de commit
              NOTAS_PENDIENTES=$(sqlite3 data/notas_credito.db "SELECT COUNT(*) FROM notas_credito WHERE estado='PENDIENTE';" 2>/dev/null || echo "0")
              NOTAS_APLICADAS=$(sqlite3 data/notas_credito.db "SELECT COUNT(*) FROM notas_credito WHERE estado='APLICADA';" 2>/dev/null || echo "0")
              APLICACIONES_HOY=$(sqlite3 data/notas_credito.db "SELECT COUNT(*) FROM aplicaciones_notas WHERE DATE(fecha_aplicacion) = DATE('now');" 2>/dev/null || echo "0")
              
              # Mensaje de commit simplificado en una l√≠nea
              COMMIT_MSG="üóÑÔ∏è Actualizaci√≥n autom√°tica BD ${FECHA} | Pendientes: ${NOTAS_PENDIENTES} | Aplicadas: ${NOTAS_APLICADAS} | Aplicaciones hoy: ${APLICACIONES_HOY} | Run: ${GITHUB_RUN_NUMBER}"
              
              git commit -m "$COMMIT_MSG"
              
              # Push al repositorio
              echo "üì§ Enviando cambios al repositorio..."
              git push
              
              echo "‚úÖ Base de datos actualizada y persistida en el repositorio"
              echo ""
              echo "üìä Cambios guardados:"
              echo "  - Notas pendientes: ${NOTAS_PENDIENTES}"
              echo "  - Notas aplicadas: ${NOTAS_APLICADAS}"
              echo "  - Aplicaciones hoy: ${APLICACIONES_HOY}"
            fi
          else
            echo "‚ö†Ô∏è  Base de datos no encontrada, no hay nada que persistir"
          fi
          
          echo "=================================================="
      
      # ============================================================
      # 6. GUARDAR REPORTES COMO ARTIFACTS (TEMPORAL)
      # ============================================================
      - name: üìä Cargar Excel generado como artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reporte-facturas-${{ github.run_number }}
          path: output/*.xlsx
          retention-days: 30
      
      - name: üìù Cargar reportes de texto como artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reportes-adicionales-${{ github.run_number }}
          path: output/*.txt
          retention-days: 30
      
      # ============================================================
      # 7. CREAR BACKUP DE SEGURIDAD (ARTIFACT)
      # ============================================================
      - name: üíæ Crear backup de seguridad como artifact
        if: always()
        run: |
          if [ -f data/notas_credito.db ]; then
            # Crear directorio de backups
            mkdir -p backups
            
            # Copiar BD con timestamp
            TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
            cp data/notas_credito.db backups/notas_credito_${TIMESTAMP}.db
            
            echo "‚úÖ Backup creado: backups/notas_credito_${TIMESTAMP}.db"
          fi
      
      - name: üì¶ Subir backup como artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backup-bd-${{ github.run_number }}
          path: backups/*.db
          retention-days: 7
      
      # ============================================================
      # 8. NOTIFICACI√ìN EN CASO DE ERROR
      # ============================================================
      - name: üö® Notificar error (si falla)
        if: failure()
        run: |
          echo "‚ùå El proceso fall√≥. Revisar logs arriba."
          echo "üîç Puntos de verificaci√≥n:"
          echo "  1. ¬øLas credenciales est√°n configuradas correctamente?"
          echo "  2. ¬øLa API de SIESA est√° disponible?"
          echo "  3. ¬øEl servidor SMTP est√° accesible?"
          echo "  4. ¬øLa base de datos se pudo actualizar?"
          echo ""
          echo "üìß Se recomienda revisar los secrets en:"
          echo "   Settings ‚Üí Secrets and variables ‚Üí Actions"
          echo ""
          echo "üîÑ Si la BD se corrompi√≥, restaurar desde el backup:"
          echo "   - Descargar artifact 'backup-bd-XXX'"
          echo "   - Reemplazar data/notas_credito.db"
          echo "   - Hacer commit manual"